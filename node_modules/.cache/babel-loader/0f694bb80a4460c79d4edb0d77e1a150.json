{"ast":null,"code":"import { client } from \"./api-client\";\nimport { deleteStorage, safeStorageGet, safeStorageSet } from \"./storage-client\";\nconst TOKEN_URL = `/atr-gateway/identity-management/api/v1/auth/short-token?useDeflate=true`;\nconst TOKEN_KEY = \"apiToken\";\nconst token = safeStorageGet(TOKEN_KEY);\n\nasync function fetchToken() {\n  let token = safeStorageGet(TOKEN_KEY);\n\n  if (token) {\n    return token;\n  } else {\n    const user = {\n      username: Config,\n      password: \"candidate_test1\",\n      snowEnabled: true\n    };\n    const headers = {\n      method: \"POST\",\n      accept: \"*/*\",\n      \"Content-Type\": \"application/json\"\n    };\n    return client(TOKEN_URL, {\n      method: \"POST\",\n      body: JSON.stringify(user),\n      headers\n    }).then(response => {\n      const value = response.data.token;\n      safeStorageSet(TOKEN_KEY, value);\n      return response.data.token;\n    });\n  }\n}\n\nfunction resetToken() {\n  deleteStorage(TOKEN_KEY);\n  fetchToken();\n}\n\nexport { fetchToken, resetToken, token };","map":{"version":3,"sources":["/Users/kratichauhan/tickets-app/src/utils/auth-provider.ts"],"names":["client","deleteStorage","safeStorageGet","safeStorageSet","TOKEN_URL","TOKEN_KEY","token","fetchToken","user","username","Config","password","snowEnabled","headers","method","accept","body","JSON","stringify","then","response","value","data","resetToken"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,cAAxC,QAA8D,kBAA9D;AACA,MAAMC,SAAS,GAAI,0EAAnB;AACA,MAAMC,SAAS,GAAG,UAAlB;AAEA,MAAMC,KAAK,GAAGJ,cAAc,CAACG,SAAD,CAA5B;;AAEA,eAAeE,UAAf,GAA6C;AAC3C,MAAID,KAAK,GAAGJ,cAAc,CAACG,SAAD,CAA1B;;AACA,MAAIC,KAAJ,EAAW;AACT,WAAOA,KAAP;AACD,GAFD,MAEO;AACL,UAAME,IAAI,GAAG;AACXC,MAAAA,QAAQ,EAAEC,MADC;AAEXC,MAAAA,QAAQ,EAAE,iBAFC;AAGXC,MAAAA,WAAW,EAAE;AAHF,KAAb;AAKA,UAAMC,OAAoB,GAAG;AAC3BC,MAAAA,MAAM,EAAE,MADmB;AAE3BC,MAAAA,MAAM,EAAE,KAFmB;AAG3B,sBAAgB;AAHW,KAA7B;AAMA,WAAOf,MAAM,CAACI,SAAD,EAAY;AACvBU,MAAAA,MAAM,EAAE,MADe;AAEvBE,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,IAAf,CAFiB;AAGvBK,MAAAA;AAHuB,KAAZ,CAAN,CAIJM,IAJI,CAIEC,QAAD,IAAc;AACpB,YAAMC,KAAK,GAAID,QAAD,CAAkBE,IAAlB,CAAuBhB,KAArC;AAEAH,MAAAA,cAAc,CAACE,SAAD,EAAYgB,KAAZ,CAAd;AACA,aAAQD,QAAD,CAAkBE,IAAlB,CAAuBhB,KAA9B;AACD,KATM,CAAP;AAUD;AACF;;AACD,SAASiB,UAAT,GAAsB;AACpBtB,EAAAA,aAAa,CAACI,SAAD,CAAb;AACAE,EAAAA,UAAU;AACX;;AAED,SAASA,UAAT,EAAqBgB,UAArB,EAAiCjB,KAAjC","sourcesContent":["import { client } from \"./api-client\"\nimport { deleteStorage, safeStorageGet, safeStorageSet } from \"./storage-client\"\nconst TOKEN_URL = `/atr-gateway/identity-management/api/v1/auth/short-token?useDeflate=true`\nconst TOKEN_KEY = \"apiToken\"\n\nconst token = safeStorageGet(TOKEN_KEY)\n\nasync function fetchToken(): Promise<string> {\n  let token = safeStorageGet(TOKEN_KEY)\n  if (token) {\n    return token\n  } else {\n    const user = {\n      username: Config,\n      password: \"candidate_test1\",\n      snowEnabled: true,\n    }\n    const headers: HeadersInit = {\n      method: \"POST\",\n      accept: \"*/*\",\n      \"Content-Type\": \"application/json\",\n    }\n\n    return client(TOKEN_URL, {\n      method: \"POST\",\n      body: JSON.stringify(user),\n      headers,\n    }).then((response) => {\n      const value = (response as any).data.token\n\n      safeStorageSet(TOKEN_KEY, value)\n      return (response as any).data.token as string\n    })\n  }\n}\nfunction resetToken() {\n  deleteStorage(TOKEN_KEY)\n  fetchToken()\n}\n\nexport { fetchToken, resetToken, token }\n"]},"metadata":{},"sourceType":"module"}