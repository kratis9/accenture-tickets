{"ast":null,"code":"import { loadingEnd } from \"../store/actions/loader\";\nimport { setTotalCount } from \"../store/actions/pagination\";\nimport { receiveTickets } from \"../store/actions/tickets\";\nimport { fetchToken, resetToken, token } from \"./auth-provider\";\nconst API_URL = `https://dh-atrpackageinstalltest.atrmywizard-aiops.com`;\n\nasync function client(endpoint, customConfig = {}) {\n  const config = {\n    method: \"GET\",\n    headers: {\n      apiToken: token\n    },\n    ...customConfig\n  };\n  const ticketReponse = {};\n  const response = await window.fetch(`${API_URL}/${endpoint}`, config);\n\n  for (var pair of response.headers.entries()) {\n    // accessing the entries\n    if (pair[0] === \"x-total-count\") {\n      // key I'm looking for in this instance\n      ticketReponse.totalCount = pair[1];\n    }\n  }\n\n  const data = await response.json();\n  ticketReponse.data = data;\n\n  if (response.ok) {\n    console.log(data);\n    return ticketReponse;\n  } else {\n    if (data.error === \"unauthorized\") {\n      resetToken();\n    }\n\n    return Promise.reject(data);\n  }\n}\n\nasync function getTickets(page = 0, ticketsPerPage = 10) {\n  const TICKET_URL = `atr-gateway/ticket-management/api/v1/tickets?ticketType=incident&sortDirection=DESC&page=${page}&perPage=${ticketsPerPage}`;\n  const token = await fetchToken();\n\n  if (!token) {\n    throw new Error(\"No token provided\");\n  }\n\n  return client(TICKET_URL).then(responseData => responseData, errorData => {\n    if (errorData.error === \"unauthorized\") {\n      fetchToken();\n    }\n  });\n}\n\nfunction fetchDashboardData(pageNumber) {\n  return async dispatch => {\n    const data = await getTickets(pageNumber, 50);\n\n    if (data) {\n      dispatch(loadingEnd());\n      dispatch(receiveTickets(data.data));\n      dispatch(setTotalCount(data.totalCount));\n    } else {\n      dispatch();\n    }\n  };\n}\n\nexport { client, fetchDashboardData };","map":{"version":3,"sources":["/Users/kratichauhan/tickets-app/src/utils/api-client.ts"],"names":["loadingEnd","setTotalCount","receiveTickets","fetchToken","resetToken","token","API_URL","client","endpoint","customConfig","config","method","headers","apiToken","ticketReponse","response","window","fetch","pair","entries","totalCount","data","json","ok","console","log","error","Promise","reject","getTickets","page","ticketsPerPage","TICKET_URL","Error","then","responseData","errorData","fetchDashboardData","pageNumber","dispatch"],"mappings":"AAAA,SAASA,UAAT,QAA2B,yBAA3B;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,KAAjC,QAA8C,iBAA9C;AACA,MAAMC,OAAO,GAAI,wDAAjB;;AAEA,eAAeC,MAAf,CAAsBC,QAAtB,EAAwCC,YAAY,GAAG,EAAvD,EAAwE;AACtE,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,KADK;AAEbC,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAER;AADH,KAFI;AAKb,OAAGI;AALU,GAAf;AAOA,QAAMK,aAAkB,GAAG,EAA3B;AACA,QAAMC,QAAQ,GAAG,MAAMC,MAAM,CAACC,KAAP,CAAc,GAAEX,OAAQ,IAAGE,QAAS,EAApC,EAAuCE,MAAvC,CAAvB;;AACA,OAAK,IAAIQ,IAAT,IAAiBH,QAAQ,CAACH,OAAT,CAAiBO,OAAjB,EAAjB,EAAoD;AAClD;AACA,QAAID,IAAI,CAAC,CAAD,CAAJ,KAAY,eAAhB,EAAiC;AAC/B;AACAJ,MAAAA,aAAa,CAACM,UAAd,GAA2BF,IAAI,CAAC,CAAD,CAA/B;AACD;AACF;;AACD,QAAMG,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB;AACAR,EAAAA,aAAa,CAACO,IAAd,GAAqBA,IAArB;;AACA,MAAIN,QAAQ,CAACQ,EAAb,EAAiB;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,WAAOP,aAAP;AACD,GAHD,MAGO;AACL,QAAIO,IAAI,CAACK,KAAL,KAAe,cAAnB,EAAmC;AACjCtB,MAAAA,UAAU;AACX;;AACD,WAAOuB,OAAO,CAACC,MAAR,CAAeP,IAAf,CAAP;AACD;AACF;;AAED,eAAeQ,UAAf,CAA0BC,IAAY,GAAG,CAAzC,EAA4CC,cAAsB,GAAG,EAArE,EAAyE;AACvE,QAAMC,UAAU,GAAI,4FAA2FF,IAAK,YAAWC,cAAe,EAA9I;AAEA,QAAM1B,KAAK,GAAG,MAAMF,UAAU,EAA9B;;AACA,MAAI,CAACE,KAAL,EAAY;AACV,UAAM,IAAI4B,KAAJ,CAAU,mBAAV,CAAN;AACD;;AAED,SAAO1B,MAAM,CAACyB,UAAD,CAAN,CAAmBE,IAAnB,CACJC,YAAD,IAAkBA,YADb,EAEJC,SAAD,IAAe;AACb,QAAIA,SAAS,CAACV,KAAV,KAAoB,cAAxB,EAAwC;AACtCvB,MAAAA,UAAU;AACX;AACF,GANI,CAAP;AAQD;;AAED,SAASkC,kBAAT,CAA4BC,UAA5B,EAAgD;AAC9C,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMlB,IAAS,GAAG,MAAMQ,UAAU,CAACS,UAAD,EAAa,EAAb,CAAlC;;AACA,QAAIjB,IAAJ,EAAU;AACRkB,MAAAA,QAAQ,CAACvC,UAAU,EAAX,CAAR;AACAuC,MAAAA,QAAQ,CAACrC,cAAc,CAACmB,IAAI,CAACA,IAAN,CAAf,CAAR;AACAkB,MAAAA,QAAQ,CAACtC,aAAa,CAACoB,IAAI,CAACD,UAAN,CAAd,CAAR;AACD,KAJD,MAIO;AACLmB,MAAAA,QAAQ;AACT;AACF,GATD;AAUD;;AAED,SAAShC,MAAT,EAAiB8B,kBAAjB","sourcesContent":["import { loadingEnd } from \"../store/actions/loader\"\nimport { setTotalCount } from \"../store/actions/pagination\"\nimport { receiveTickets } from \"../store/actions/tickets\"\nimport { fetchToken, resetToken, token } from \"./auth-provider\"\nconst API_URL = `https://dh-atrpackageinstalltest.atrmywizard-aiops.com`\n\nasync function client(endpoint: string, customConfig = {}): Promise<{}> {\n  const config = {\n    method: \"GET\",\n    headers: {\n      apiToken: token,\n    },\n    ...customConfig,\n  }\n  const ticketReponse: any = {}\n  const response = await window.fetch(`${API_URL}/${endpoint}`, config)\n  for (var pair of response.headers.entries() as any) {\n    // accessing the entries\n    if (pair[0] === \"x-total-count\") {\n      // key I'm looking for in this instance\n      ticketReponse.totalCount = pair[1]\n    }\n  }\n  const data = await response.json()\n  ticketReponse.data = data\n  if (response.ok) {\n    console.log(data)\n    return ticketReponse\n  } else {\n    if (data.error === \"unauthorized\") {\n      resetToken()\n    }\n    return Promise.reject(data)\n  }\n}\n\nasync function getTickets(page: number = 0, ticketsPerPage: number = 10) {\n  const TICKET_URL = `atr-gateway/ticket-management/api/v1/tickets?ticketType=incident&sortDirection=DESC&page=${page}&perPage=${ticketsPerPage}`\n\n  const token = await fetchToken()\n  if (!token) {\n    throw new Error(\"No token provided\")\n  }\n\n  return client(TICKET_URL).then(\n    (responseData) => responseData,\n    (errorData) => {\n      if (errorData.error === \"unauthorized\") {\n        fetchToken()\n      }\n    }\n  )\n}\n\nfunction fetchDashboardData(pageNumber: number) {\n  return async (dispatch) => {\n    const data: any = await getTickets(pageNumber, 50)\n    if (data) {\n      dispatch(loadingEnd())\n      dispatch(receiveTickets(data.data))\n      dispatch(setTotalCount(data.totalCount))\n    } else {\n      dispatch()\n    }\n  }\n}\n\nexport { client, fetchDashboardData }\n"]},"metadata":{},"sourceType":"module"}