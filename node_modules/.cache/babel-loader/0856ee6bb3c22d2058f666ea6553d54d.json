{"ast":null,"code":"import { fetchToken, resetToken, token } from \"./auth-provider\";\nconst API_URL = `https://dh-atrpackageinstalltest.atrmywizard-aiops.com`;\n\nasync function client(endpoint, customConfig = {}) {\n  let res = {};\n  const config = {\n    method: \"GET\",\n    headers: {\n      apiToken: token\n    },\n    ...customConfig\n  };\n  const response = await window.fetch(`${API_URL}/${endpoint}`, config);\n\n  for (var pair of response.headers.entries()) {\n    // accessing the entries\n    if (pair[0] === \"x-total-count\") {// key I'm looking for in this instance\n    }\n  }\n\n  const data = await response.json();\n\n  if (response.ok) {\n    console.log(data);\n    return data;\n  } else {\n    if (data.error === \"unauthorized\") {\n      resetToken();\n    }\n\n    return Promise.reject(data);\n  }\n}\n\nasync function getTickets(page = 0, ticketsPerPage = 10) {\n  const TICKET_URL = `atr-gateway/ticket-management/api/v1/tickets?ticketType=incident&sortDirection=DESC&page=${page}&perPage=${ticketsPerPage}`;\n  const token = await fetchToken();\n\n  if (!token) {\n    throw new Error(\"No token provided\");\n  }\n\n  return client(TICKET_URL).then(responseData => responseData, errorData => {\n    if (errorData.error === \"unauthorized\") {\n      fetchToken();\n    }\n  });\n}\n\nexport { client, getTickets };","map":{"version":3,"sources":["/Users/kratichauhan/tickets-app/src/utils/api-client.ts"],"names":["fetchToken","resetToken","token","API_URL","client","endpoint","customConfig","res","config","method","headers","apiToken","response","window","fetch","pair","entries","data","json","ok","console","log","error","Promise","reject","getTickets","page","ticketsPerPage","TICKET_URL","Error","then","responseData","errorData"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,UAArB,EAAiCC,KAAjC,QAA8C,iBAA9C;AACA,MAAMC,OAAO,GAAI,wDAAjB;;AAEA,eAAeC,MAAf,CAAsBC,QAAtB,EAAwCC,YAAY,GAAG,EAAvD,EAAwE;AACtE,MAAIC,GAAG,GAAG,EAAV;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,KADK;AAEbC,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAET;AADH,KAFI;AAKb,OAAGI;AALU,GAAf;AAQA,QAAMM,QAAQ,GAAG,MAAMC,MAAM,CAACC,KAAP,CAAc,GAAEX,OAAQ,IAAGE,QAAS,EAApC,EAAuCG,MAAvC,CAAvB;;AACA,OAAK,IAAIO,IAAT,IAAiBH,QAAQ,CAACF,OAAT,CAAiBM,OAAjB,EAAjB,EAA6C;AAC3C;AACA,QAAID,IAAI,CAAC,CAAD,CAAJ,KAAY,eAAhB,EAAiC,CAC/B;AAED;AACF;;AAED,QAAME,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;;AACA,MAAIN,QAAQ,CAACO,EAAb,EAAiB;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,WAAOA,IAAP;AACD,GAHD,MAGO;AACL,QAAIA,IAAI,CAACK,KAAL,KAAe,cAAnB,EAAmC;AACjCrB,MAAAA,UAAU;AACX;;AACD,WAAOsB,OAAO,CAACC,MAAR,CAAeP,IAAf,CAAP;AACD;AACF;;AAED,eAAeQ,UAAf,CAA0BC,IAAY,GAAG,CAAzC,EAA4CC,cAAsB,GAAG,EAArE,EAAyE;AACvE,QAAMC,UAAU,GAAI,4FAA2FF,IAAK,YAAWC,cAAe,EAA9I;AAEA,QAAMzB,KAAK,GAAG,MAAMF,UAAU,EAA9B;;AACA,MAAI,CAACE,KAAL,EAAY;AACV,UAAM,IAAI2B,KAAJ,CAAU,mBAAV,CAAN;AACD;;AAED,SAAOzB,MAAM,CAACwB,UAAD,CAAN,CAAmBE,IAAnB,CACJC,YAAD,IAAkBA,YADb,EAEJC,SAAD,IAAe;AACb,QAAIA,SAAS,CAACV,KAAV,KAAoB,cAAxB,EAAwC;AACtCtB,MAAAA,UAAU;AACX;AACF,GANI,CAAP;AAQD;;AAED,SAASI,MAAT,EAAiBqB,UAAjB","sourcesContent":["import { fetchToken, resetToken, token } from \"./auth-provider\"\nconst API_URL = `https://dh-atrpackageinstalltest.atrmywizard-aiops.com`\n\nasync function client(endpoint: string, customConfig = {}): Promise<{}> {\n  let res = {};\n  const config = {\n    method: \"GET\",\n    headers: {\n      apiToken: token,\n    },\n    ...customConfig,\n  }\n\n  const response = await window.fetch(`${API_URL}/${endpoint}`, config)\n  for (var pair of response.headers.entries()) {\n    // accessing the entries\n    if (pair[0] === \"x-total-count\") {\n      // key I'm looking for in this instance\n     \n    }\n  }\n\n  const data = await response.json()\n  if (response.ok) {\n    console.log(data)\n    return data\n  } else {\n    if (data.error === \"unauthorized\") {\n      resetToken()\n    }\n    return Promise.reject(data)\n  }\n}\n\nasync function getTickets(page: number = 0, ticketsPerPage: number = 10) {\n  const TICKET_URL = `atr-gateway/ticket-management/api/v1/tickets?ticketType=incident&sortDirection=DESC&page=${page}&perPage=${ticketsPerPage}`\n\n  const token = await fetchToken()\n  if (!token) {\n    throw new Error(\"No token provided\")\n  }\n\n  return client(TICKET_URL).then(\n    (responseData) => responseData,\n    (errorData) => {\n      if (errorData.error === \"unauthorized\") {\n        fetchToken()\n      }\n    }\n  )\n}\n\nexport { client, getTickets }\n"]},"metadata":{},"sourceType":"module"}