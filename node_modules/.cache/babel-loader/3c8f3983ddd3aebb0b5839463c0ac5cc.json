{"ast":null,"code":"import Config from \"../config\";\nimport { loadingEnd } from \"../store/actions/loader\";\nimport { setTotalCount } from \"../store/actions/pagination\";\nimport { receiveTickets } from \"../store/actions/tickets\";\nimport { fetchToken, resetToken } from \"./auth-provider\";\nconst API_URL = `https://dh-atrpackageinstalltest.atrmywizard-aiops.com`;\n\n// Http client utitlilty function to hancle server calls and handle error.\nasync function client(endpoint, customConfig = {}) {\n  const config = {\n    method: \"GET\",\n    ...customConfig\n  };\n  const response = await window.fetch(`${API_URL}/${endpoint}`, config);\n  const ticketReponse = extractTotalCount(response);\n  const data = await response.json();\n  ticketReponse.data = data;\n\n  if (response.ok) {\n    console.log(data);\n    return ticketReponse;\n  } else {\n    if (data.error === \"unauthorized\") {\n      resetToken();\n    }\n\n    return Promise.reject(data);\n  }\n}\n\nfunction extractTotalCount(response) {\n  for (var pair of response.headers.entries()) {\n    // accessing the entries,\n    if (pair[0] === \"x-total-count\") {\n      // key I'm looking for in this instance\n      return {\n        totalCount: pair[1]\n      };\n    }\n  }\n}\n\nasync function getTickets(page = 0, ticketsPerPage = 10) {\n  const TICKET_URL = `atr-gateway/ticket-management/api/v1/tickets?ticketType=incident&sortDirection=DESC&page=${page}&perPage=${ticketsPerPage}`;\n  const token = await fetchToken();\n\n  if (!token) {\n    throw new Error(\"No token provided\");\n  }\n\n  const headers = {\n    headers: {\n      apiToken: token\n    }\n  };\n  return client(TICKET_URL, headers).then(responseData => responseData, errorData => {\n    if (errorData.error === \"unauthorized\") {\n      fetchToken();\n    }\n  });\n}\n\nfunction fetchDashboardData(pageNumber) {\n  return async dispatch => {\n    const tickets = await getTickets(pageNumber, Config.recordsPerAPICall);\n    dispatch(loadingEnd());\n    dispatch(receiveTickets(tickets.data));\n    dispatch(setTotalCount(tickets.data.totalCount));\n  };\n}\n\nexport { client, fetchDashboardData };","map":{"version":3,"sources":["/Users/kratichauhan/tickets-app/src/utils/api-client.ts"],"names":["Config","loadingEnd","setTotalCount","receiveTickets","fetchToken","resetToken","API_URL","client","endpoint","customConfig","config","method","response","window","fetch","ticketReponse","extractTotalCount","data","json","ok","console","log","error","Promise","reject","pair","headers","entries","totalCount","getTickets","page","ticketsPerPage","TICKET_URL","token","Error","apiToken","then","responseData","errorData","fetchDashboardData","pageNumber","dispatch","tickets","recordsPerAPICall"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,iBAAvC;AACA,MAAMC,OAAO,GAAI,wDAAjB;;AAOA;AACA,eAAeC,MAAf,CAAsBC,QAAtB,EAAwCC,YAAY,GAAG,EAAvD,EAAwE;AACtE,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,KADK;AAGb,OAAGF;AAHU,GAAf;AAMA,QAAMG,QAAQ,GAAG,MAAMC,MAAM,CAACC,KAAP,CAAc,GAAER,OAAQ,IAAGE,QAAS,EAApC,EAAuCE,MAAvC,CAAvB;AAEA,QAAMK,aAA6B,GAAGC,iBAAiB,CAACJ,QAAD,CAAvD;AAEA,QAAMK,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;AACAH,EAAAA,aAAa,CAACE,IAAd,GAAqBA,IAArB;;AAEA,MAAIL,QAAQ,CAACO,EAAb,EAAiB;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,WAAOF,aAAP;AACD,GAHD,MAGO;AACL,QAAIE,IAAI,CAACK,KAAL,KAAe,cAAnB,EAAmC;AACjCjB,MAAAA,UAAU;AACX;;AACD,WAAOkB,OAAO,CAACC,MAAR,CAAeP,IAAf,CAAP;AACD;AACF;;AACD,SAASD,iBAAT,CAA2BJ,QAA3B,EAA+C;AAC7C,OAAK,IAAIa,IAAT,IAAiBb,QAAQ,CAACc,OAAT,CAAiBC,OAAjB,EAAjB,EAAoD;AAClD;AACA,QAAIF,IAAI,CAAC,CAAD,CAAJ,KAAY,eAAhB,EAAiC;AAC/B;AACA,aAAO;AAAEG,QAAAA,UAAU,EAAEH,IAAI,CAAC,CAAD;AAAlB,OAAP;AACD;AACF;AACF;;AAED,eAAeI,UAAf,CAA0BC,IAAY,GAAG,CAAzC,EAA4CC,cAAsB,GAAG,EAArE,EAAyE;AACvE,QAAMC,UAAU,GAAI,4FAA2FF,IAAK,YAAWC,cAAe,EAA9I;AAEA,QAAME,KAAK,GAAG,MAAM7B,UAAU,EAA9B;;AACA,MAAI,CAAC6B,KAAL,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACD,QAAMR,OAAO,GAAG;AACdA,IAAAA,OAAO,EAAE;AACPS,MAAAA,QAAQ,EAAEF;AADH;AADK,GAAhB;AAKA,SAAO1B,MAAM,CAACyB,UAAD,EAAaN,OAAb,CAAN,CAA4BU,IAA5B,CACJC,YAAD,IAAkBA,YADb,EAEJC,SAAD,IAAe;AACb,QAAIA,SAAS,CAAChB,KAAV,KAAoB,cAAxB,EAAwC;AACtClB,MAAAA,UAAU;AACX;AACF,GANI,CAAP;AAQD;;AAED,SAASmC,kBAAT,CAA4BC,UAA5B,EAAgD;AAC9C,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,OAAY,GAAG,MAAMb,UAAU,CAACW,UAAD,EAAaxC,MAAM,CAAC2C,iBAApB,CAArC;AAEAF,IAAAA,QAAQ,CAACxC,UAAU,EAAX,CAAR;AACAwC,IAAAA,QAAQ,CAACtC,cAAc,CAACuC,OAAO,CAACzB,IAAT,CAAf,CAAR;AACAwB,IAAAA,QAAQ,CAACvC,aAAa,CAACwC,OAAO,CAACzB,IAAR,CAAaW,UAAd,CAAd,CAAR;AACD,GAND;AAOD;;AAED,SAASrB,MAAT,EAAiBgC,kBAAjB","sourcesContent":["import Config from \"../config\"\nimport { loadingEnd } from \"../store/actions/loader\"\nimport { setTotalCount } from \"../store/actions/pagination\"\nimport { receiveTickets } from \"../store/actions/tickets\"\nimport { fetchToken, resetToken } from \"./auth-provider\"\nconst API_URL = `https://dh-atrpackageinstalltest.atrmywizard-aiops.com`\n\ntype ServerResponse = {\n  data?: Record<string, any>\n  totalCount?: number\n}\n\n// Http client utitlilty function to hancle server calls and handle error.\nasync function client(endpoint: string, customConfig = {}): Promise<{}> {\n  const config = {\n    method: \"GET\",\n\n    ...customConfig,\n  }\n\n  const response = await window.fetch(`${API_URL}/${endpoint}`, config)\n\n  const ticketReponse: ServerResponse = extractTotalCount(response)\n\n  const data = await response.json()\n  ticketReponse.data = data\n  \n  if (response.ok) {\n    console.log(data)\n    return ticketReponse\n  } else {\n    if (data.error === \"unauthorized\") {\n      resetToken()\n    }\n    return Promise.reject(data)\n  }\n}\nfunction extractTotalCount(response: Response) {\n  for (var pair of response.headers.entries() as any) {\n    // accessing the entries,\n    if (pair[0] === \"x-total-count\") {\n      // key I'm looking for in this instance\n      return { totalCount: pair[1] }\n    }\n  }\n}\n\nasync function getTickets(page: number = 0, ticketsPerPage: number = 10) {\n  const TICKET_URL = `atr-gateway/ticket-management/api/v1/tickets?ticketType=incident&sortDirection=DESC&page=${page}&perPage=${ticketsPerPage}`\n\n  const token = await fetchToken()\n  if (!token) {\n    throw new Error(\"No token provided\")\n  }\n  const headers = {\n    headers: {\n      apiToken: token,\n    },\n  }\n  return client(TICKET_URL, headers).then(\n    (responseData) => responseData,\n    (errorData) => {\n      if (errorData.error === \"unauthorized\") {\n        fetchToken()\n      }\n    }\n  )\n}\n\nfunction fetchDashboardData(pageNumber: number) {\n  return async (dispatch) => {\n    const tickets: any = await getTickets(pageNumber, Config.recordsPerAPICall)\n\n    dispatch(loadingEnd())\n    dispatch(receiveTickets(tickets.data))\n    dispatch(setTotalCount(tickets.data.totalCount))\n  }\n}\n\nexport { client, fetchDashboardData }\n"]},"metadata":{},"sourceType":"module"}